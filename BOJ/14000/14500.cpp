// 테트로미노
// https://www.acmicpc.net/problem/14500

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
typedef pair<int, int> pr;

pr dir[6][4][4] = {
	{ {{0, 0}, {0, 1}, {0, 2}, {0, 3}}, {{0, 0}, {1, 0}, {2, 0}, {3, 0}}, {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}}, {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}} },
	{ {{0, 0}, {1, 0}, {1, 1}, {2, 1}}, {{0, 0}, {0, 1}, {-1, 1}, {-1, 2}}, {{0, 0}, {1, 0}, {1, -1}, {2, -1}}, {{0, 0}, {0, 1}, {1, 1}, {1, 2}} },
	{ {{0, 0}, {0, 1}, {1, 0}, {1, 1}}, {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}}, {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}}, {{-1, -1}, {-1, -1}, {-1, -1}, {-1, -1}} },
	{ {{0, 0}, {0, 1}, {0, 2}, {-1, 2}}, {{0, 0}, {1, 0}, {2, 0}, {2, -1}}, {{0, 0}, {0, -1}, {0, -2}, {-1, -2}}, {{0, 0}, {-1, 0}, {-2, 0}, {-2, 1}} },
	{ {{0, 0}, {0, 1}, {0, 2}, {1, 2}}, {{0, 0}, {1, 0}, {2, 0}, {2, 1}}, {{0, 0}, {0, -1}, {0, -2}, {1, -2}}, {{0, 0}, {-1, 0}, {-2, 0}, {-2, -1}} },
	{ {{0, 0}, {0, 1}, {1, 1}, {0, 2}}, {{0, 0}, {1, 0}, {1, -1}, {2, 0}}, {{0, 0}, {0, -1}, {-1, -1}, {0, -2}}, {{0, 0}, {-1, 0}, {-1, 1}, {-2, 0}} }
};

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);

	int n, m;
	cin >> n >> m;
	vector<vector<int>> board(n, vector<int>(m));
	for (int i = 0; i < n; i++)
		for (int j = 0; j < m; j++)
			cin >> board[i][j];
	int res = 0;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			for (int p = 0; p < 6; p++) {
				for (int r = 0; r < 4; r++) {
					if (dir[p][r][0].first == -1)
						break;
					int sum = 0;
					bool err = false;
					for (int b = 0; b < 4; b++) {
						int x = i + dir[p][r][b].first;
						int y = j + dir[p][r][b].second;
						if (x < 0 || y < 0 || x >= n || y >= m) {
							err = true;
							break;
						}
						sum += board[x][y];
					}
					if (err)
						continue;
					res = max(res, sum);
				}
			}
		}
	}
	cout << res << '\n';
}

// 숫자가 적힌 n*m 보드에 테트로미노 하나를 놓을 때 얻을 수 있는 수의 최대 합은?
// 회전/대칭까지 포함해 얻을 수 있는 테트로미노 형태는 19가지 - 이 형태를 모두 보드에 대서 최댓값을 구해도 됨
// 놓아서 보드에서 벗어나는 경우가 아니라면 합을 모두 구해본 뒤 최댓값을 갱신 - 500*500*19니 충분히 가능
// 이게 바로 브포