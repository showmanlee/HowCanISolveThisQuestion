// 병든 나이트
// https://www.acmicpc.net/problem/1783

#include <iostream>
#include <string>
#include <algorithm>
using namespace std;

int main(void) {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);

	int n, m;
	cin >> n >> m;
	int res = 0;
	if (n == 1) {
		res = 1;
	} else if (n == 2) {
		res = min(4, (m + 1) / 2);
	} else if (m < 7) {
		res = min(4, m);
	} else {
		res = m - 7 + 5;
	}
	cout << res << '\n';
}

// (2, 1), (1, 2), (-1, 2), (-2, 1) 방향으로 이동할 수 있는 말이 n*m 보드의 좌측 하단에서 출발해 (4번 이상 이동할 경우 4가지 방식 모두로 한 번 이상 움직이며) 여행할 때, 방문할 수 있는 최대 칸 개수 구하기

// 언뜻 보면 dfs 문제 같지만, n과 m이 20억까지 주어질 수 있음 - 이건 공식 문제임
// 먼저 n(x)나 m(y)이 1일 경우 절대 이동이 불가능함 - 따라서 결과는 1
// n이 2인 경우 x = |1|인 방식으로 이동할 수 있음 - 다만 4번 이상 이동할 경우 모든 이동 방식을 써야 하기에 이 방식으로는 최대 4칸까지만 이동할 수 있음
// 그리고 m이 최소 3칸 이상 확보될 때 다음 칸을 이동할 수 있으므로 결과는 min(4, (m + 1) / 2)
// 모든 이동 방식을 사용하면 m이 7 이상이고 n이 3 이상이어야 함 - 모두 더해보면 나오지요
// 만약 m이 그 이하라면 모든 이동 방식을 사용할 수 없으므로 min(4, m)칸만 이동 가능
// 마지막으로 위 모든 조건이 아니라면 모든 이동 방식을 사용해 가로 7칸을 지나 5번 이동하고, 그 이후로는 가로로 1칸씩 이동하면 방문 칸 수를 최대로 뽑을 수 있음
// 따라서 m - 7 + 5로 둘 수 있음