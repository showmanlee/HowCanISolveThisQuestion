// std::정렬부터 시작하는 디버깅 생활
// https://www.acmicpc.net/problem/13316

5
1 1
0 0
2 3
4 5
5 0

// "평면의 x >= 0, y >= 0 부분에 점 N개가 있다. 이 점들을 다음과 같은 조건을 만족하도록 정렬하시오. - 모든 i < j에 대해, i번째 점 (xi, yi)와 j번째 점 (xj, yj)는 xi * yj ≤ xj * yi 를 만족한다."
// 위 문제를 풀기 위해 작성한 아래 코드의 반례 데이터를 찾아라
// 반례 데이터를 적기만 하면 되는 거라 txt로도 풀 수 있음
/*
#include <stdio.h>
#include <algorithm>
#include <vector>
#include <stdlib.h>
#include <cassert>			// 입력값 검증을 위한 assert문

using namespace std;

typedef pair<int,int> pii;

int main()
{
	int N, a, b;
	assert(scanf("%d", &N) == 1);
	assert(2 <= N && N <= 1000);

	// 입력
	vector<pii> G;
	for(int i = 1; i <= N; i++){
		assert(scanf("%d%d", &a, &b) == 2);
		assert(0 <= a && a <= 1000 && 0 <= b && b <= 1000);
		G.push_back(pii(a, b));
	}

	// sort - C++에서의 익명 함수 사용
	sort(G.begin(), G.end(), [](const pii &l, const pii &r){ return l.first * r.second < l.second * r.first; });

	// 출력
	bool ch = false;
	for(int i = 0; i < N; i++){
		for(int j = i+1; j < N; j++){
			ch |= G[i].first * G[j].second > G[i].second * G[j].first;
		}
	}
	assert(ch);
	return 0;
}
*/

// stable_sort 문제는 아님 - sorting 함수 자체가 앞쪽과 뒷쪽 원소를 선택해 계산하는 것이므로 i < j임도 만족함
// 여기서 주목해야 하는 곳은 비교식에 곱하기가 들어가는데 입력값 범위에 0이 포함된다는 것
// 0이 포함되는 경우 한 항의 결과는 무조건 0이 됨 - 0이 2개인 경우 들어오는 값에 관계없이 무조건 false가 출력
// 이로 인해 (0, 0)은 별도의 핸들링을 하지 않는 한 항상 정렬을 받지 못하게 됨
// 따라서 (0, 0)이 들어가면 다 정답이다